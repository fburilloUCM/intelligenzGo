name: Go

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Install dependencies
      run: cd hacker-news-scraper && go mod tidy

    - name: Build
      run: cd hacker-news-scraper && go build -v ./...

    - name: Run tests
      run: cd hacker-news-scraper && go test -v ./... -coverprofile=coverage.out

    - name: Generate coverage report
      run: cd hacker-news-scraper && go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: hacker-news-scraper/coverage.html

  coverage-check:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Download coverage report
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: hacker-news-scraper/coverage.html

    - name: Check test coverage
      run: |
        cd hacker-news-scraper
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 90.0" | bc -l) )); then
          echo "Test coverage is below 90%"
          exit 1
        fi

  functional-test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: docker build -t my-go-app hacker-news-scraper/

    - name: Run Docker container
      run: docker run -d -p 8080:8080 --name my-go-app-container my-go-app

    - name: Perform functional test
      run: |
        sleep 5 # Wait for the server to start
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/hacker-news-items)
        if [ "$RESPONSE" != "200" ]; then
          echo "Functional test failed"
          exit 1
        fi
        echo "Functional test passed"

    - name: Clean up
      run: docker rm -f my-go-app-container
